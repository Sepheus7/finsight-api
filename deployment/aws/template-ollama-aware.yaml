# AWS SAM Template for FinSight - Ollama-Aware Deployment
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  FinSight AI-Enhanced Financial Fact-Checking API - Serverless Architecture
  
  A serverless API that enhances AI-generated financial advice with real-time 
  fact-checking, context enrichment, compliance detection, and quality scoring.
  Supports multiple LLM providers with fallback strategies.

Globals:
  Function:
    Timeout: 60
    MemorySize: 1024
    Runtime: python3.11
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref EnhancementHistoryTable
        S3_BUCKET: !Ref DataCacheBucket
        # LLM Configuration for AWS Lambda (Ollama not supported)
        FINSIGHT_LLM_PROVIDER: !Ref LLMProvider
        OPENAI_API_KEY: !Ref OpenAIApiKey
        ANTHROPIC_API_KEY: !Ref AnthropicApiKey
        FINSIGHT_OPENAI_MODEL: !Ref OpenAIModel
        FINSIGHT_ANTHROPIC_MODEL: !Ref AnthropicModel
        FINSIGHT_TEMPERATURE: "0.1"
        FINSIGHT_MAX_TOKENS: "1000"
        # System Configuration
        FINSIGHT_CACHE_ENABLED: "true"
        FINSIGHT_CACHE_HOURS: "24"
        FINSIGHT_MAX_RETRIES: "3"
        FINSIGHT_REQUEST_TIMEOUT: "30"
        FINSIGHT_DEBUG: !Ref DebugMode
        # AWS Configuration
        FINSIGHT_AWS_REGION: !Ref AWS::Region

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment stage
  
  LLMProvider:
    Type: String
    Default: openai
    AllowedValues: [openai, anthropic, regex]
    Description: >
      LLM provider for AWS Lambda deployment. 
      Note: Ollama is not supported in serverless Lambda environment.
  
  OpenAIApiKey:
    Type: String
    Default: ""
    NoEcho: true
    Description: OpenAI API key (required if LLMProvider is openai)
  
  AnthropicApiKey:
    Type: String
    Default: ""
    NoEcho: true
    Description: Anthropic API key (required if LLMProvider is anthropic)
  
  OpenAIModel:
    Type: String
    Default: gpt-4o-mini
    Description: OpenAI model to use (gpt-4o-mini recommended for cost efficiency)
  
  AnthropicModel:
    Type: String
    Default: claude-3-haiku-20240307
    Description: Anthropic model to use (Claude 3 Haiku recommended for cost efficiency)
  
  DebugMode:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Enable debug logging

Conditions:
  IsProduction: !Equals [!Ref Stage, prod]

Resources:
  # API Gateway
  FinancialAIApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: AWS_IAM

  # Lambda Functions
  
  # Enhanced Fact Check Function (Main endpoint with Ollama-aware LLM integration)
  EnhancedFactCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../src/
      Handler: handlers.enhanced_fact_check_handler.lambda_handler
      Description: Enhanced fact-checking with LLM-powered claim extraction
      Timeout: 120
      MemorySize: 1536
      Events:
        FactCheckApi:
          Type: Api
          Properties:
            RestApiId: !Ref FinancialAIApi
            Path: /fact-check
            Method: post
      Environment:
        Variables:
          USE_LLM: "true"
          YAHOO_FINANCE_ENABLED: "true"
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DataCacheBucket
        - S3WritePolicy:
            BucketName: !Ref DataCacheBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref EnhancementHistoryTable

  # Main Enhancement Function (Orchestrator)
  EnhanceResponseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../src/
      Handler: handlers.enhance_handler.lambda_handler
      Description: Main endpoint to enhance AI responses with fact-checking
      Events:
        EnhanceApi:
          Type: Api
          Properties:
            RestApiId: !Ref FinancialAIApi
            Path: /enhance
            Method: post
      Environment:
        Variables:
          FACT_CHECK_FUNCTION: !Ref EnhancedFactCheckFunction
          CONTEXT_ENRICHMENT_FUNCTION: !Ref ContextEnrichmentFunction
          COMPLIANCE_CHECK_FUNCTION: !Ref ComplianceCheckFunction
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt EnhancedFactCheckFunction.Arn
                - !GetAtt ContextEnrichmentFunction.Arn
                - !GetAtt ComplianceCheckFunction.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref EnhancementHistoryTable

  # Context Enrichment Function
  ContextEnrichmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../src/
      Handler: handlers.context_enrichment_handler.lambda_handler
      Description: Add relevant financial context to responses
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DataCacheBucket

  # Compliance Checking Function
  ComplianceCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../src/
      Handler: handlers.compliance_handler.lambda_handler
      Description: Check for regulatory compliance issues
      Environment:
        Variables:
          COMPLIANCE_RULES_TABLE: !Ref ComplianceRulesTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ComplianceRulesTable

  # Health Check Function
  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../src/
      Handler: handlers.health_handler.lambda_handler
      Description: API health check endpoint
      Events:
        HealthApi:
          Type: Api
          Properties:
            RestApiId: !Ref FinancialAIApi
            Path: /health
            Method: get
            Auth:
              Authorizer: NONE

  # Root Info Function
  RootFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../src/
      Handler: handlers.root_handler.lambda_handler
      Description: API information endpoint
      Events:
        RootApi:
          Type: Api
          Properties:
            RestApiId: !Ref FinancialAIApi
            Path: /
            Method: get
            Auth:
              Authorizer: NONE

  # DynamoDB Tables
  EnhancementHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-enhancement-history'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProduction, true, false]

  ComplianceRulesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-compliance-rules'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: rule_id
          AttributeType: S
      KeySchema:
        - AttributeName: rule_id
          KeyType: HASH

  # S3 Bucket for Data Caching
  DataCacheBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-data-cache-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldCacheData
            Status: Enabled
            ExpirationInDays: !If [IsProduction, 30, 7]

  # CloudWatch Log Groups
  EnhancedFactCheckLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${EnhancedFactCheckFunction}'
      RetentionInDays: !If [IsProduction, 90, 7]

  EnhanceResponseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${EnhanceResponseFunction}'
      RetentionInDays: !If [IsProduction, 90, 7]

  # CloudWatch Alarms for Monitoring
  FactCheckErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub '${AWS::StackName}-FactCheck-Errors'
      AlarmDescription: 'Monitor fact-check function errors'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref EnhancedFactCheckFunction

  # API Gateway CloudWatch Dashboard
  ApiDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: IsProduction
    Properties:
      DashboardName: !Sub '${AWS::StackName}-Dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${EnhancedFactCheckFunction}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Duration", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "FinSight Lambda Metrics"
              }
            }
          ]
        }

Outputs:
  FinancialAIApiUrl:
    Description: "API Gateway endpoint URL for FinSight API"
    Value: !Sub "https://${FinancialAIApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  EnhancementHistoryTableName:
    Description: "DynamoDB table name for enhancement history"
    Value: !Ref EnhancementHistoryTable
    Export:
      Name: !Sub "${AWS::StackName}-HistoryTable"

  DataCacheBucketName:
    Description: "S3 bucket name for data caching"
    Value: !Ref DataCacheBucket
    Export:
      Name: !Sub "${AWS::StackName}-CacheBucket"
  
  LLMProviderUsed:
    Description: "LLM provider configured for this deployment"
    Value: !Ref LLMProvider
    Export:
      Name: !Sub "${AWS::StackName}-LLMProvider"
  
  DeploymentInfo:
    Description: "Deployment configuration summary"
    Value: !Sub "Stage: ${Stage}, LLM: ${LLMProvider}, Debug: ${DebugMode}"
